def get_final_targets(wildcards):
    outputs = []
    outputs.extend(expand("results/reads/{sample_id}.fasta", sample_id=SAMPLE_IDS))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
    #--- hifiasm
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.gfa", sample_id=SAMPLE_IDS, k=K))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.gfa", sample_id=SAMPLE_IDS, k=K))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta", sample_id=SAMPLE_IDS, k=K))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.fasta", sample_id=SAMPLE_IDS, k=K))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm_alignment/{sample_id}.hifiasm.fasta", sample_id=SAMPLE_IDS, k=K))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm_alignment/{sample_id}_hifiasm_to_hg002_minimap_{asm_preset}.bam", sample_id=SAMPLE_IDS, k=K, asm_preset=ASM_PRESET))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm_alignment/{sample_id}_hifiasm_to_hg002_minimap_{asm_preset}.bam.bai", sample_id=SAMPLE_IDS, k=K, asm_preset=ASM_PRESET))
    #--- hifiasm r_utg assembly ----#
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm/{sample_id}.bp.r_utg.fasta", sample_id=SAMPLE_IDS, k=K))
    #--- hifiasm r_utg assembly ----#
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm_alignment/{sample_id}_r_utg_to_hg002_minimap_{asm_preset}.bam", sample_id=SAMPLE_IDS, k=K, asm_preset=ASM_PRESET))
    outputs.extend(expand("results_hs/hs-{k}/{sample_id}/hifiasm_alignment/{sample_id}_r_utg_to_hg002_minimap_{asm_preset}.bam.bai", sample_id=SAMPLE_IDS, k=K, asm_preset=ASM_PRESET))

    if read_type == "ec":
        outputs.extend(expand("results_hs/hs-{k}/reads/{sample_id}.ec.fasta", sample_id=SAMPLE_IDS, k=K))
        outputs.extend(expand("results_hs/hs-{k}/reads/{sample_id}.ec.kff", sample_id=SAMPLE_IDS, k=K))
        if run_mode in ["positive_control_only","all"]:
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.ec.gbz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.ec.pg.vg", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.ec.snarls", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.hg2.ec.gaf", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.hg2.ec.gaf.gz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.vg", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/debugging/{region_id}_nodes_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/debugging/{region_id}_read_traversals.zip", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.pg.dist", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # --- annotate with refpos ---#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.refpos.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/chunk/subgraph.hg2.refpos.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/subgraph.anchors.json.extended.pruned.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/subgraph.anchors.json.reads_processed.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/params_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/extended_anchor_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # reliable snarl stats
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/reliable_snarl_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # debugging files
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/debugging/{region_id}_nodes_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/debugging/{region_id}_read_traversals.zip", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/debugging/{region_id}_snarls.bandage.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # shasta assembly alignment to chunked reference
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # displayPaf alignment plots
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/assembly_alignment/{asm_preset}_plots", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # hifiasm-related files
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.coords.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.r_utg.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # shasta to hifiasm alignment
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_minimap_{asm_preset}.bam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_minimap_{asm_preset}.bam.bai", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_{asm_preset}_alignment_plots.pdf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # pga run log
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/ec/pga_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))

        if run_mode in ["no_positive_control","all"]:
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.ec.gbz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.ec.gaf.gz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.ec.pg.vg", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.ec.snarls", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.vg", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.pg.gfa", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- annotate with refpos ---#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.refpos.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.refpos.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/chunk/subgraph.pg.dist", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/subgraph.anchors.json.extended.pruned.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/subgraph.anchors.json.reads_processed.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/params_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/shasta/{sample_id}.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/shasta/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/extended_anchor_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/reliable_snarl_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- debugging files
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/debugging/{region_id}_nodes_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/debugging/{region_id}_read_traversals.zip", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/debugging/{region_id}_snarls.bandage.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- displayPaf
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/assembly_alignment/{asm_preset}_plots", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            #--- hifiasm
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.coords.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # #---- hifiasm hap1 and hap2 assemblies ----#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            #--- hifiasm r_utg assembly ----#
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.r_utg.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET)) 
            #--- shasta to hifiasm alignment
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/ec/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_{asm_preset}_alignment_plots.pdf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))

    elif read_type == "raw":
        outputs.extend(expand("results/reads/{sample_id}.kff", sample_id=SAMPLE_IDS))
        if run_mode in ["positive_control_only","all"]:
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.gbz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.pg.vg", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.hg2.snarls", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.hg2.gaf", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.hg2.gaf.gz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.vg", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/debugging/{region_id}_nodes_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/debugging/{region_id}_read_traversals.zip", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.pg.dist", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # --- annotate with refpos ---#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.refpos.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/chunk/subgraph.hg2.refpos.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/subgraph.anchors.json.extended.pruned.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/subgraph.anchors.json.reads_processed.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/params_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/extended_anchor_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/shasta/{sample_id}.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/shasta/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/pc/pga_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))

        if run_mode in ["no_positive_control","all"]:
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.dist", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.withzip.min", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.zipcodes", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/{sample_id}.gaf.zst", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.gaf", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.pg.vg", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.snarls", sample_id=SAMPLE_IDS, k=K))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.vg", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.gfa", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- annotate with refpos ---#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.refpos.gam", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.refpos.gaf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.dist", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.pruned.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.reads_processed.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/params_run.log", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/extended_anchor_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/reliable_snarl_stats", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- debugging files
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/debugging/{region_id}_nodes_info.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/debugging/{region_id}_read_traversals.zip", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/debugging/{region_id}_snarls.bandage.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID))
            #--- displayPaf
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{asm_preset}_plots", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            #--- hifiasm
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/hg002.chunked.{asm_preset}.for_hifiasm.coords.tsv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # #---- hifiasm hap1 and hap2 assemblies ----#
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            # outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}_{region_id}_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            #--- hifiasm r_utg assembly ----#
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}.{asm_preset}.hifiasm.r_utg.subregion.fasta", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm_assembly/{sample_id}_{region_id}_r_utg_hifiasm_subregion_to_hg002_minimap_{asm_preset}.csv", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET)) 
            #--- shasta to hifiasm alignment
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))
            outputs.extend(expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta_to_hifiasm_alignment/{sample_id}_{region_id}_shasta_to_hifiasm_{asm_preset}_alignment_plots.pdf", sample_id=SAMPLE_IDS, k=K, region_id=REGION_ID, asm_preset=ASM_PRESET))

    return outputs
